From f8c96da8ab11d897ec872bcf2703c464e366eb90 Mon Sep 17 00:00:00 2001
From: Junjie Mao <junjie.mao@intel.com>
Date: Wed, 26 May 2021 09:16:45 +0800
Subject: [PATCH v3 2/7] HV: vmsr: expose MCA to the selected VM

Signed-off-by: Junjie Mao <junjie.mao@intel.com>
---
 hypervisor/arch/x86/guest/vm.c             |  7 +++++
 hypervisor/arch/x86/guest/vmsr.c           | 43 +++++++++++++++++++++++++++++-
 hypervisor/include/arch/x86/asm/guest/vm.h |  1 +
 hypervisor/include/arch/x86/asm/msr.h      |  5 ++++
 hypervisor/include/public/acrn_common.h    |  2 ++
 misc/config_tools/schema/VMtypes.xsd       |  1 +
 6 files changed, 58 insertions(+), 1 deletion(-)

diff --git a/hypervisor/arch/x86/guest/vm.c b/hypervisor/arch/x86/guest/vm.c
index 5b86729..e50388c 100644
--- a/hypervisor/arch/x86/guest/vm.c
+++ b/hypervisor/arch/x86/guest/vm.c
@@ -148,6 +148,13 @@ bool is_nvmx_configured(const struct acrn_vm *vm)
 	return ((vm_config->guest_flags & GUEST_FLAG_NVMX_ENABLED) != 0U);
 }
 
+bool is_mca_enabled(const struct acrn_vm *vm)
+{
+	struct acrn_vm_config *vm_config = get_vm_config(vm->vm_id);
+
+	return ((vm_config->guest_flags & GUEST_FLAG_MCA_ENABLED) != 0U);
+}
+
 /**
  * @brief VT-d PI posted mode can possibly be used for PTDEVs assigned
  * to this VM if platform supports VT-d PI AND lapic passthru is not configured
diff --git a/hypervisor/arch/x86/guest/vmsr.c b/hypervisor/arch/x86/guest/vmsr.c
index 1290318..1ba3182 100644
--- a/hypervisor/arch/x86/guest/vmsr.c
+++ b/hypervisor/arch/x86/guest/vmsr.c
@@ -360,6 +360,22 @@ void init_emulated_msrs(struct acrn_vcpu *vcpu)
 	vcpu_set_guest_msr(vcpu, MSR_IA32_FEATURE_CONTROL, val64);
 }
 
+void init_mca_msrs(struct acrn_vcpu *vcpu)
+{
+	uint8_t *msr_bitmap = vcpu->arch.msr_bitmap;
+	uint32_t nr_banks, i;
+	uint64_t v;
+
+	v = msr_read(MSR_IA32_MCG_CAP);
+	nr_banks = (uint32_t)v & MCG_CAP_BANK_COUNT;
+
+	for (i = 0; i < nr_banks; i++) {
+		enable_msr_interception(msr_bitmap, MSR_IA32_MC0_CTL + (4 * i), INTERCEPT_DISABLE);
+		enable_msr_interception(msr_bitmap, MSR_IA32_MC0_STATUS + (4 * i), INTERCEPT_READ);
+		enable_msr_interception(msr_bitmap, MSR_IA32_MC0_CTL2 + i, INTERCEPT_DISABLE);
+	}
+}
+
 /**
  * @pre vcpu != NULL
  */
@@ -404,7 +420,9 @@ void init_msr_emulation(struct acrn_vcpu *vcpu)
 	init_emulated_msrs(vcpu);
 
 	/* Initialize VMX MSRs for nested virtualization */
-	init_vmx_msrs(vcpu);
+	if (is_mca_enabled(vcpu->vm)) {
+		init_vmx_msrs(vcpu);
+	}
 }
 
 static int32_t write_pat_msr(struct acrn_vcpu *vcpu, uint64_t value)
@@ -448,6 +466,19 @@ bool is_iwkey_backup_support(struct acrn_vcpu *vcpu)
 	return (ebx & CPUID_EBX_KL_BACKUP_MSR) == CPUID_EBX_KL_BACKUP_MSR;
 }
 
+bool is_mc_status_msr(uint32_t msr)
+{
+	uint32_t nr_banks;
+	uint64_t v;
+
+	v = msr_read(MSR_IA32_MCG_CAP);
+	nr_banks = (uint32_t)v & MCG_CAP_BANK_COUNT;
+
+	return (msr >= MSR_IA32_MC0_STATUS) &&
+		(msr < (MSR_IA32_MC0_STATUS + (4U * nr_banks))) &&
+		(((msr - MSR_IA32_MC0_STATUS) % 4U) == 0U);
+}
+
 /**
  * @pre vcpu != NULL
  */
@@ -538,6 +569,14 @@ int32_t rdmsr_vmexit_handler(struct acrn_vcpu *vcpu)
 		break;
 	}
 	case MSR_IA32_MCG_CAP:
+	{
+		if (is_mca_enabled(vcpu->vm)) {
+			v = msr_read(MSR_IA32_MCG_CAP) & (MCG_CAP_BANK_COUNT | MCG_CAP_CMCI_P);
+		} else {
+			v = 0UL;
+		}
+		break;
+	}
 	case MSR_IA32_MCG_STATUS:
 	{
 		v = 0U;
@@ -612,6 +651,8 @@ int32_t rdmsr_vmexit_handler(struct acrn_vcpu *vcpu)
 			 * to just one switch to improvement  performance?
 			 */
 			err = read_vmx_msr(vcpu, msr, &v);
+		} else if (is_mca_enabled(vcpu->vm) && is_mc_status_msr(msr)) {
+			v = msr_read(msr) & ~(MSR_IA32_MC_STATUS_ADDRV | MSR_IA32_MC_STATUS_MISCV);
 		} else {
 			pr_warn("%s(): vm%d vcpu%d reading MSR %lx not supported",
 				__func__, vcpu->vm->vm_id, vcpu->vcpu_id, msr);
diff --git a/hypervisor/include/arch/x86/asm/guest/vm.h b/hypervisor/include/arch/x86/asm/guest/vm.h
index 1d2d64c..6a271ce 100644
--- a/hypervisor/include/arch/x86/asm/guest/vm.h
+++ b/hypervisor/include/arch/x86/asm/guest/vm.h
@@ -257,6 +257,7 @@ void vrtc_init(struct acrn_vm *vm);
 bool is_lapic_pt_configured(const struct acrn_vm *vm);
 bool is_rt_vm(const struct acrn_vm *vm);
 bool is_nvmx_configured(const struct acrn_vm *vm);
+bool is_mca_enabled(const struct acrn_vm *vm);
 bool is_pi_capable(const struct acrn_vm *vm);
 bool has_rt_vm(void);
 struct acrn_vm *get_highest_severity_vm(bool runtime);
diff --git a/hypervisor/include/arch/x86/asm/msr.h b/hypervisor/include/arch/x86/asm/msr.h
index 00ed0a2..296cad1 100644
--- a/hypervisor/include/arch/x86/asm/msr.h
+++ b/hypervisor/include/arch/x86/asm/msr.h
@@ -666,4 +666,9 @@ void update_msr_bitmap_x2apic_passthru(struct acrn_vcpu *vcpu);
 /* Flush L1 D-cache */
 #define IA32_L1D_FLUSH				(1UL << 0U)
 
+#define MCG_CAP_BANK_COUNT			0xFFUL
+#define MCG_CAP_CMCI_P				(1UL << 10U)
+#define MSR_IA32_MC_STATUS_ADDRV		(1UL << 58U)
+#define MSR_IA32_MC_STATUS_MISCV		(1UL << 59U)
+
 #endif /* MSR_H */
diff --git a/hypervisor/include/public/acrn_common.h b/hypervisor/include/public/acrn_common.h
index ba50006..9ec2fd2 100644
--- a/hypervisor/include/public/acrn_common.h
+++ b/hypervisor/include/public/acrn_common.h
@@ -54,6 +54,8 @@
 #define GUEST_FLAG_RT				(1UL << 4U)     /* Whether the vm is RT-VM */
 #define GUEST_FLAG_NVMX_ENABLED			(1UL << 5U)	/* Whether this VM supports nested virtualization */
 
+#define GUEST_FLAG_MCA_ENABLED                  (1UL << 33U)    /* Whether MCA is exposed to the VM */
+
 /* TODO: We may need to get this addr from guest ACPI instead of hardcode here */
 #define VIRTUAL_SLEEP_CTL_ADDR		0x400U /* Pre-launched VM uses ACPI reduced HW mode and sleep control register */
 #define VIRTUAL_PM1A_CNT_ADDR		0x404U
diff --git a/misc/config_tools/schema/VMtypes.xsd b/misc/config_tools/schema/VMtypes.xsd
index 3cc93c6..ac64ad4 100644
--- a/misc/config_tools/schema/VMtypes.xsd
+++ b/misc/config_tools/schema/VMtypes.xsd
@@ -49,6 +49,7 @@
     <xs:enumeration value="GUEST_FLAG_HIDE_MTRR" />
     <xs:enumeration value="GUEST_FLAG_RT" />
     <xs:enumeration value="GUEST_FLAG_NVMX_ENABLED" />
+    <xs:enumeration value="GUEST_FLAG_MCA_ENABLED" />
   </xs:restriction>
 </xs:simpleType>
 
-- 
2.7.4

