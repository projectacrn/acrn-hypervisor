{
	"$schema": "http://json-schema.org/draft-07/schema",
	"type": "object",
	"required": [
		"acrn-config"
	],
	"properties": {
		"acrn-config": {
			"$ref": "#/definitions/ACRNConfigType"
		}
	},
	"additionalProperties": true,
	"definitions": {
		"Boolean": {
			"type": "string",
			"enum": [
				"y",
				"n"
			]
		},
		"EnablementType": {
			"type": "string",
			"enum": [
				"Enable",
				"Disable"
			]
		},
		"HexFormat": {
			"type": "string",
			"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
		},
		"None": {
			"type": "string",
			"pattern": "^[*]{0}$"
		},
		"BuildType": {
			"type": "string",
			"enum": [
				"release",
				"debug"
			]
		},
		"KernLoadAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"KernEntryAddr": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"MaxMsixTableNumType": {
			"type": "integer",
			"minimum": 1,
			"maximum": 2048
		},
		"MaxMsixTableSizeType": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "MaxMsixTableNumType",
					"type": "integer",
					"minimum": 1,
					"maximum": 2048
				}
			]
		},
		"MemorySizeType": {
			"anyOf": [
				{
					"title": "HexFormat",
					"type": "string",
					"pattern": "^0[Xx][0-9A-Fa-f]+|0$"
				}
			]
		},
		"LogLevelType": {
			"type": "string",
			"enum": [
				"0",
				"1",
				"2",
				"3",
				"4",
				"5"
			],
			"enumNames": [
				"0: None",
				"1: Critical",
				"2: Error",
				"3: Warning",
				"4: Information",
				"5: Debug"
			]
		},
		"SchedulerType": {
			"type": "string",
			"enum": [
				"SCHED_NOOP",
				"SCHED_IORR",
				"SCHED_BVT",
				"SCHED_PRIO"
			]
		},
		"PriorityType": {
			"type": "string",
			"enum": [
				"PRIO_LOW",
				"PRIO_HIGH"
			]
		},
		"SerialConsoleType": {
			"type": "string",
			"pattern": "^.*ttyS[\\d]+$"
		},
		"SerialConsoleOptions": {
			"anyOf": [
				{
					"title": "None",
					"type": "string",
					"pattern": "^[*]{0}$"
				},
				{
					"title": "SerialConsoleType",
					"type": "string",
					"pattern": "^.*ttyS[\\d]+$"
				}
			]
		},
		"VMNameType": {
			"type": "string",
			"pattern": "^([a-zA-Z0-9_\\-]){1,15}$"
		},
		"VBDFType": {
			"type": "string",
			"pattern": "^[0-9A-Fa-f]{1,2}:[0-1][0-9A-Fa-f].[0-7]$"
		},
		"ProviderType": {
			"type": "string",
			"enum": [
				"Hypervisor",
				"Device Model"
			]
		},
		"IVSHMEMSize": {
			"type": "integer",
			"enum": [
				2,
				4,
				8,
				16,
				32,
				64,
				128,
				256,
				512
			]
		},
		"LoadOrderType": {
			"type": "string",
			"enum": [
				"SERVICE_VM",
				"PRE_LAUNCHED_VM",
				"POST_LAUNCHED_VM"
			]
		},
		"VMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM",
				"TEE_VM",
				"REE_VM"
			]
		},
		"VMKernelType": {
			"type": "string",
			"enum": [
				"KERNEL_BZIMAGE",
				"KERNEL_RAWIMAGE",
				"KERNEL_ELF"
			]
		},
		"ConsoleVuartConfiguration": {
			"type": "string",
			"enum": [
				"None",
				"COM Port 1",
				"COM Port 2",
				"COM Port 3",
				"COM Port 4",
				"PCI"
			]
		},
		"VuartType": {
			"type": "string",
			"enum": [
				"legacy",
				"pci"
			]
		},
		"OSType": {
			"type": "string",
			"enum": [
				"Non-Windows OS",
				"Windows OS"
			]
		},
		"BasicVMType": {
			"type": "string",
			"enum": [
				"RTVM",
				"STANDARD_VM"
			]
		},
		"IVSHMEMVM": {
			"type": "object",
			"required": [
				"VM_NAME",
				"VBDF"
			],
			"properties": {
				"VM_NAME": {
					"$ref": "#/definitions/VMNameType",
					"title": "Shared VMS",
					"description": "<div class=\"document\">\n <p>\n  Name of the VM which use this IVSHMEM.\n </p>\n</div>\n"
				},
				"VBDF": {
					"$ref": "#/definitions/VBDFType",
					"title": "VBDF",
					"description": "<div class=\"document\">\n <p>\n  Bus, Device and function of the virtual\ndevice in VM . Set in hex.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMVMS": {
			"type": "object",
			"required": [
				"IVSHMEM_VM"
			],
			"properties": {
				"IVSHMEM_VM": {
					"items": {
						"$ref": "#/definitions/IVSHMEMVM"
					},
					"type": "array",
					"title": "IVSHMEM_VM",
					"description": "<div class=\"document\">\n <p>\n  Set each VM which use this IVSHMEM.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMRegionType": {
			"type": "object",
			"required": [
				"NAME",
				"PROVIDED_BY",
				"IVSHMEM_SIZE",
				"IVSHMEM_VMS"
			],
			"properties": {
				"NAME": {
					"type": "string",
					"pattern": "^\\w+$",
					"title": "Name",
					"description": "<div class=\"document\">\n <p>\n  Name of the shared memory region.\n </p>\n</div>\n"
				},
				"PROVIDED_BY": {
					"$ref": "#/definitions/ProviderType",
					"default": "Hypervisor",
					"title": "Emulated by",
					"description": "<div class=\"document\">\n <p>\n  Whether the shared memory region is emulated by the hypervisor or Device Model.\n </p>\n</div>\n"
				},
				"IVSHMEM_SIZE": {
					"$ref": "#/definitions/IVSHMEMSize",
					"default": 2,
					"title": "Size (MB)",
					"description": "<div class=\"document\">\n <p>\n  Select the size of the shared memory region\nin megabytes. The value should be a power of 2\nand no more than 512.\n </p>\n</div>\n"
				},
				"IVSHMEM_VMS": {
					"$ref": "#/definitions/IVSHMEMVMS",
					"title": "Shared VMs",
					"description": "<div class=\"document\">\n <p>\n  Select all VMs that use the shared memory region.\n </p>\n</div>\n"
				}
			}
		},
		"IVSHMEMInfo": {
			"type": "object",
			"properties": {
				"IVSHMEM_REGION": {
					"items": {
						"$ref": "#/definitions/IVSHMEMRegionType"
					},
					"type": "array",
					"title": "IVSHMEM_REGION",
					"description": "<div class=\"document\">\n <p>\n  Set a inter-VM shared memory.\n </p>\n</div>\n"
				}
			}
		},
		"RDTType": {
			"type": "object",
			"required": [
				"RDT_ENABLED",
				"CDP_ENABLED",
				"VCAT_ENABLED"
			],
			"properties": {
				"RDT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Intel Resource Director Technology",
					"description": "<div class=\"document\">\n <p>\n  Enable the Intel Resource Director Technology (RDT)\nallocation feature. If the board hardware does not support\nRDT, setting this option to\n  <span class=\"docutils literal\">\n   y\n  </span>\n  is ignored.\n </p>\n</div>\n"
				},
				"CDP_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Code and Data Prioritization",
					"description": "<div class=\"document\">\n <p>\n  Enable Code and Data Prioritization (CDP). CDP provides control over code and data placement in cache to improve an application's real-time performance.\n </p>\n</div>\n"
				},
				"VCAT_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "VCAT_ENABLED",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"CLOS_MASK": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "CLOS_MASK",
					"description": "<div class=\"document\">\n <p>\n  Specify the cache capacity bitmask for the CLOS; only continuous '1' bits\nare allowed. The value will be ignored when hardware does not support RDT.\nThis option takes effect only if\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.RDT_ENABLED\" target=\"_blank\">\n   hv.FEATURES.RDT.RDT_ENABLED\n  </a>\n  is set to\n  <span class=\"docutils literal\">\n   y\n  </span>\n  .\nAs\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-vm.clos.vcpu_clos\" target=\"_blank\">\n   vm.clos.vcpu_clos\n  </a>\n  specifies the index of the CLOS to be associated with the given vCPU,\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/reference/config-options.html#cmdoption-arg-hv.FEATURES.RDT.CLOS_MASK\" target=\"_blank\">\n   hv.FEATURES.RDT.CLOS_MASK\n  </a>\n  of that CLOS would impact the performance of the given vCPU.\n </p>\n</div>\n"
				},
				"MBA_DELAY": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "MBA_DELAY",
					"description": "<div class=\"document\">\n <p>\n  Memory Bandwidth Allocation delay value.\n </p>\n</div>\n"
				}
			}
		},
		"SSRAMInfo": {
			"type": "object",
			"required": [
				"SSRAM_ENABLED"
			],
			"properties": {
				"SSRAM_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Software SRAM (for real-time apps)",
					"description": "<div class=\"document\">\n <p>\n  Enable Software SRAM. This feature reserves memory buffers as always-cached memory to improve an application's real-time performance.\n </p>\n</div>\n"
				}
			}
		},
		"CPUAffinityConfiguration": {
			"type": "object",
			"required": [
				"pcpu_id"
			],
			"properties": {
				"pcpu_id": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 2
					},
					"title": "pcpu_id",
					"description": "<div class=\"document\">\n <p>\n  A pCPU that this VM's vCPU is allowed to pin\nto.\n </p>\n</div>\n"
				}
			}
		},
		"CLOSConfiguration": {
			"type": "object",
			"required": [
				"vcpu_clos"
			],
			"properties": {
				"vcpu_clos": {
					"type": "array",
					"items": {
						"type": "integer",
						"default": 0
					},
					"title": "vcpu_clos",
					"description": "<div class=\"document\">\n <p>\n  By default (\n  <span class=\"docutils literal\">\n   virtual_cat_support\n  </span>\n  is not specified):\nvcpu_clos is per-CPU and it configures each CPU in VMs to a desired CLOS ID in the\n  <span class=\"docutils literal\">\n   VM\n  </span>\n  section of the\nscenario file. Follow\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/rdt_configuration.html#rdt-detection-capabilities\" target=\"_blank\">\n   RDT Detection and Resource Capabilities\n  </a>\n  to identify the maximum supported CLOS ID that can be used.\n </p>\n <p>\n  If\n  <span class=\"docutils literal\">\n   virtual_cat_support\n  </span>\n  is specified:\nvcpu_clos is not per-CPU anymore, just a list of physical CLOSIDs (minimum 2) that are assigned to VMs\nfor vCAT use. Each vcpu_clos will be mapped to a virtual CLOSID, the first vcpu_clos is mapped to virtual\nCLOSID 0 and the second is mapped to virtual CLOSID 1, etc.\n </p>\n</div>\n"
				}
			}
		},
		"EPCSection": {
			"type": "object",
			"required": [
				"base",
				"size"
			],
			"properties": {
				"base": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "Intel Software Guard Extensions (SGX) EPC section base",
					"description": "<div class=\"document\">\n <p>\n  Specify the enclave page cache (EPC) section base for Intel Software Guard Extensions (SGX). Must be page aligned.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/HexFormat",
					"default": 0,
					"title": "Intel Software Guard Extensions (SGX) EPC section size (bytes)",
					"description": "<div class=\"document\">\n <p>\n  Specify the enclave page cache (EPC) section size in bytes for Intel Software Guard Extensions (SGX). Must be page aligned.\n </p>\n</div>\n"
				}
			}
		},
		"MemoryInfo": {
			"type": "object",
			"required": [
				"whole",
				"start_hpa"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				},
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"OSConfigurations": {
			"type": "object",
			"required": [
				"kern_type",
				"kern_mod"
			],
			"properties": {
				"kern_type": {
					"$ref": "#/definitions/VMKernelType",
					"title": "Kernel image type",
					"description": "<div class=\"document\">\n <p>\n  Select the kernel image type so that the hypervisor can load it correctly.\n </p>\n</div>\n"
				},
				"kern_mod": {
					"type": "string",
					"title": "Kernel module tag",
					"description": "<div class=\"document\">\n <p>\n  Specify the tag for the kernel image that is used as a multiboot module. The tag's spelling must exactly match the module tag in the GRUB multiboot cmdline.\n </p>\n</div>\n"
				},
				"ramdisk_mod": {
					"type": "string",
					"title": "RAMdisk module tag",
					"description": "<div class=\"document\">\n <p>\n  Specify the tag for the RAMdisk image that is used as a multiboot module. The tag's spelling must exactly match the module tag in the GRUB multiboot cmdline.\n </p>\n</div>\n"
				},
				"bootargs": {
					"type": "string",
					"title": "Kernel command-line parameters",
					"description": "<div class=\"document\">\n <p>\n  Specify the command-line parameters that will be used to boot the kernel for this VM. See\n  <a class=\"reference external\" href=\"https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html\" target=\"_blank\">\n   Linux documentation\n  </a>\n  for a list of parameters.\n </p>\n</div>\n"
				},
				"kern_load_addr": {
					"$ref": "#/definitions/KernLoadAddr",
					"title": "kern_load_addr",
					"description": "<div class=\"document\">\n <p>\n  The loading address in host memory for the VM kernel.\n </p>\n</div>\n"
				},
				"kern_entry_addr": {
					"$ref": "#/definitions/KernEntryAddr",
					"title": "kern_entry_addr",
					"description": "<div class=\"document\">\n <p>\n  The entry address in host memory for the VM kernel.\n </p>\n</div>\n"
				}
			}
		},
		"VuartEndpointType": {
			"type": "object",
			"required": [
				"vm_name",
				"io_port"
			],
			"properties": {
				"vm_name": {
					"type": "string",
					"title": "Virtual UART port",
					"description": "<div class=\"document\">\n <p>\n  Virtual UART port\n </p>\n</div>\n"
				},
				"io_port": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x3F",
					"title": "Virtual I/O address",
					"description": "<div class=\"document\">\n <p>\n  Virtual I/O address\n </p>\n</div>\n"
				},
				"vbdf": {
					"items": {
						"$ref": "#/definitions/VBDFType"
					},
					"type": "array",
					"maxItems": 1
				}
			}
		},
		"VuartConnectionType": {
			"type": "object",
			"required": [
				"name",
				"type",
				"endpoint"
			],
			"properties": {
				"name": {
					"type": "string"
				},
				"type": {
					"$ref": "#/definitions/VuartType",
					"default": "legacy"
				},
				"endpoint": {
					"minItems": 2,
					"items": {
						"$ref": "#/definitions/VuartEndpointType"
					},
					"type": "array",
					"maxItems": 2
				}
			}
		},
		"VuartConnectionsType": {
			"type": "object",
			"properties": {
				"vuart_connection": {
					"items": {
						"$ref": "#/definitions/VuartConnectionType"
					},
					"type": "array"
				}
			}
		},
		"MMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted platform module (TPM2) passthrough",
					"description": "<div class=\"document\">\n <p>\n  Pass through the trusted platform module (TPM2) device to this VM.\n </p>\n</div>\n"
				},
				"p2sb": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Primary-to-Sideband bridge passthrough",
					"description": "<div class=\"document\">\n <p>\n  Pass through the Primary-to-Sideband (P2SB) bridge register access BAR to this VM.\n </p>\n</div>\n"
				}
			}
		},
		"PCIDevsConfiguration": {
			"type": "object",
			"properties": {
				"pci_dev": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"title": "PCI device assignment",
					"description": "<div class=\"document\">\n <p>\n  Select the PCI devices you want to assign to this virtual machine.\n </p>\n</div>\n",
					"enum": {
						"type": "dynamicEnum",
						"function": "get_enum",
						"source": "board_xml",
						"selector": "//device[class]/@description",
						"sorted": "lambda s: (s.split(' ', maxsplit=1)[-1].split(':')[0], s.split(' ')[0])"
					}
				}
			}
		},
		"DebugOptionsType": {
			"type": "object",
			"required": [
				"BUILD_TYPE",
				"SERIAL_CONSOLE",
				"MEM_LOGLEVEL",
				"NPK_LOGLEVEL",
				"CONSOLE_LOGLEVEL"
			],
			"properties": {
				"BUILD_TYPE": {
					"$ref": "#/definitions/BuildType",
					"default": "debug",
					"title": "Build type",
					"description": "<div class=\"document\">\n <p>\n  Select the build type. Debug mode enables debug shell, prints, and logs. Release mode optimizes the ACRN binary for deployment and turns off all debug infrastructure. These settings can only be changed at build time.\n </p>\n</div>\n"
				},
				"SERIAL_CONSOLE": {
					"$ref": "#/definitions/SerialConsoleOptions",
					"title": "Serial console port",
					"description": "<div class=\"document\">\n <p>\n  Select the host serial device used for hypervisor debugging.\n </p>\n</div>\n",
					"enum": {
						"type": "dynamicEnum",
						"function": "get_enum",
						"source": "board_xml",
						"selector": "//ttys/serial[type != '0']/dev_path/text()",
						"sorted": null
					}
				},
				"MEM_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "ACRN log level",
					"description": "<div class=\"document\">\n <p>\n  Select the default log level for log messages stored in memory. Value can be changed at runtime. Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				},
				"NPK_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "Intel Trace Hub log level",
					"description": "<div class=\"document\">\n <p>\n  Select the default log level for the hypervisor via Intel Trace Hub log. Use the Intel Trace Hub's memory to record log messages. Value can be changed at runtime. Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				},
				"CONSOLE_LOGLEVEL": {
					"$ref": "#/definitions/LogLevelType",
					"default": 0,
					"title": "Serial console log level",
					"description": "<div class=\"document\">\n <p>\n  Select the default log level for log messages written to the serial console. Log messages with the selected value or lower are displayed.\n </p>\n</div>\n"
				}
			}
		},
		"FeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"SECURITY_VM_FIXUP",
				"KEEP_IRQ_DISABLED",
				"RDT",
				"HYPERV_ENABLED",
				"IOMMU_ENFORCE_SNP",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED",
				"IVSHMEM"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor relocation in memory. The bootloader may need to change the location of the hypervisor because of other firmware.\n </p>\n</div>\n"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Virtual CPU scheduler",
					"description": "<div class=\"document\">\n <p>\n  Select the scheduling algorithm used to determine which User VM runs on a shared virtual CPU.\n </p>\n</div>\n"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Multiboot2",
					"description": "<div class=\"document\">\n <p>\n  Enable multiboot2 protocol support and multiboot1 downward compatibility. Disable this feature if multiboot1 meets your requirements and to reduce lines of code.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable detection of split locks, which can negatively affect an application's real-time performance. If a lock is detected, an alignment check exception #AC occurs.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Uncacheable-memory lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable detection of uncacheable-memory locks, which can negatively affect an application's real-time performance. If a lock is detected, a general-protection exception #GP occurs.\n </p>\n</div>\n"
				},
				"SECURITY_VM_FIXUP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "SECURITY_VM_FIXUP",
					"description": "<div class=\"document\">\n <p>\n  Enable to do fixup for TPM2 and SMBIOS for Security VM. If no Security VM, setting this option to\n  <span class=\"docutils literal\">\n   n\n  </span>\n </p>\n</div>\n"
				},
				"KEEP_IRQ_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "KEEP_IRQ_DISABLED",
					"description": "<div class=\"document\">\n <p>\n  If\n  <span class=\"docutils literal\">\n   y\n  </span>\n  , permanently disables all interrupts in HV root mode.\n </p>\n</div>\n"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology (RDT)",
					"description": "<div class=\"document\">\n <p>\n  Intel Resource Director Technology (RDT) provides cache and memory bandwidth allocation features. The features can be used to improve an application's real-time performance.\n </p>\n</div>\n"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hyper-V virtualization technology",
					"description": "<div class=\"document\">\n <p>\n  Enable Microsoft Hyper-V Hypervisor Top-Level Functional Specification (TFLS) for Windows User VMs.\n </p>\n</div>\n"
				},
				"IOMMU_ENFORCE_SNP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "IOMMU_ENFORCE_SNP",
					"description": "<div class=\"document\">\n <p>\n  Specify if the IOMMU enforces snoop behavior of DMA operations.\n </p>\n</div>\n"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<div class=\"document\">\n <p>\n  Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from the APCI tables. Otherwise, use existing, static information from the associated board configuration file.\n </p>\n</div>\n"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<div class=\"document\">\n <p>\n  Enable L1 cache flush before VM entry to prevent L1 terminal fault. L1 terminal fault is a hardware vulnerability that allows unauthorized disclosure of information residing in the L1 data cache.\n </p>\n</div>\n"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Machine Check Error (MCE) workaround",
					"description": "<div class=\"document\">\n <p>\n  Enable the software workaround for Machine Check Error on Page Size Change (hardware bug in some processor families).\n </p>\n</div>\n"
				},
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"MemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE",
				"HV_RAM_START"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "CPU memory stack size (bytes per CPU)",
					"description": "<div class=\"document\">\n <p>\n  Specify the size of the memory stack in bytes for each physical CPU. For example, if you specify 8 kilobytes, each CPU will get its own 8-kilobyte stack.\n </p>\n</div>\n"
				},
				"HV_RAM_START": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00400000",
					"title": "HV_RAM_START",
					"description": "<div class=\"document\">\n <p>\n  The 2MB-aligned starting physical address of the RAM region used by the hypervisor.\n </p>\n</div>\n"
				}
			}
		},
		"CapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_VM_NUM",
				"MAX_IOAPIC_NUM",
				"MAX_PCI_DEV_NUM",
				"MAX_IOAPIC_LINES",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_VM_NUM": {
					"type": "integer",
					"default": 16,
					"title": "MAX_VM_NUM",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of User VMs allowed.\n </p>\n</div>\n"
				},
				"MAX_IOAPIC_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 10,
					"default": 1,
					"title": "MAX_IOAPIC_NUM",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of IOAPICs.\n </p>\n</div>\n"
				},
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of PCI devices. This impacts the amount of memory used to maintain information about these PCI devices. The default value is calculated from the board configuration file. If you have PCI devices that were not detected by the Board Inspector, you may need to change this maximum value.\n </p>\n</div>\n"
				},
				"MAX_IOAPIC_LINES": {
					"type": "integer",
					"minimum": 1,
					"maximum": 120,
					"default": 120,
					"title": "MAX_IOAPIC_LINES",
					"description": "<div class=\"document\">\n <p>\n  Maximum number of interrupt lines per IOAPIC.\n </p>\n</div>\n"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "Maximum number of IRQ entries for passthrough devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of interrupt request (IRQ) entries from all passthrough devices.\n </p>\n</div>\n"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "Maximum number of MSI-X tables per device",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of Message Signaled Interrupt MSI-X tables per device. The default value is calculated from the board configuration file.\n </p>\n</div>\n"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "Maximum number of emulated MMIO regions",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of emulated MMIO regions for device virtualization. The default value is calculated from the board configuration file.\n </p>\n</div>\n"
				}
			}
		},
		"MiscCfgOptionsType": {
			"type": "object",
			"required": [
				"GPU_SBDF"
			],
			"properties": {
				"GPU_SBDF": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x00000010",
					"title": "GPU_SBDF",
					"description": "<div class=\"document\">\n <p>\n  Segment, Bus, Device, and function of the GPU.\n </p>\n</div>\n"
				}
			}
		},
		"HVConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"MEMORY",
				"CAPACITIES",
				"MISC_CFG",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<div class=\"document\">\n <p>\n  Configure the debug facilities.\n </p>\n</div>\n"
				},
				"FEATURES": {
					"$ref": "#/definitions/FeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"MEMORY": {
					"$ref": "#/definitions/MemoryOptionsType",
					"title": "Memory options",
					"description": "<div class=\"document\">\n <p>\n  Configure memory used by the hypervisor.\n </p>\n</div>\n"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/CapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<div class=\"document\">\n <p>\n  Configure the capacities of the hypervisor.\n </p>\n</div>\n"
				},
				"MISC_CFG": {
					"$ref": "#/definitions/MiscCfgOptionsType",
					"title": "MISC_CFG",
					"description": "<div class=\"document\">\n <p>\n  Miscellaneous options for workarounds.\n </p>\n</div>\n"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<div class=\"document\">\n <p>\n  Specify the vUART connection settings.\nRefer to\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">\n   Enable vUART Configurations\n  </a>\n  for detailed vUART settings.\n </p>\n</div>\n"
				}
			}
		},
		"VMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section settings.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/MemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Select the OS type for this VM. This is required to run Windows in a User VM. See\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">\n   Device Model Parameters\n  </a>\n  for how to include this in the Device Model arguments.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<div class=\"document\">\n <p>\n  Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor global emulation will take priority over this VM setting.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<div class=\"document\">\n <p>\n  Select the USB physical bus and port number that will be emulated by the ACRN Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"ACRNConfigType": {
			"type": "object",
			"required": [
				"hv"
			],
			"properties": {
				"hv": {
					"$ref": "#/definitions/HVConfigType",
					"title": "hv",
					"description": "<div class=\"document\">\n <p>\n  The hypervisor configuration defines a working scenario and target\nboard by configuring the hypervisor image features and capabilities such as\nsetting up the log and the serial port.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section settings.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedMMIOResourcesConfiguration": {
			"type": "object",
			"properties": {
				"TPM2": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Trusted platform module (TPM2) passthrough",
					"description": "<div class=\"document\">\n <p>\n  Pass through the trusted platform module (TPM2) device to this VM.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMConfigType": {
			"type": "object",
			"required": [
				"load_order",
				"vm_type",
				"name",
				"clos",
				"memory",
				"priority",
				"companion_vmid",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"load_order": {
					"$ref": "#/definitions/LoadOrderType",
					"title": "Load order",
					"description": "<div class=\"document\">\n <p>\n  Specify the load_order.\n </p>\n</div>\n"
				},
				"vm_type": {
					"$ref": "#/definitions/VMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"secure_world_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "secure_world_support",
					"description": "<div class=\"document\">\n <p>\n  Specify secure world support for trustry OS.\n </p>\n</div>\n"
				},
				"hide_mtrr_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "hide_mtrr_support",
					"description": "<div class=\"document\">\n <p>\n  Specify MTRR capability to hide for VM.\n </p>\n</div>\n"
				},
				"security_vm": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "security_vm",
					"description": "<div class=\"document\">\n <p>\n  Specify TPM2 FIXUP for VM.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"priority": {
					"$ref": "#/definitions/PriorityType",
					"default": "PRIO_LOW",
					"title": "priority",
					"description": "<div class=\"document\">\n <p>\n  Specify the VM vCPU priority for scheduling.\n </p>\n</div>\n"
				},
				"companion_vmid": {
					"type": "integer",
					"default": 65535,
					"title": "companion_vmid",
					"description": "<div class=\"document\">\n <p>\n  Specify the companion VM id of this VM.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Select the OS type for this VM. This is required to run Windows in a User VM. See\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">\n   Device Model Parameters\n  </a>\n  for how to include this in the Device Model arguments.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<div class=\"document\">\n <p>\n  Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor global emulation will take priority over this VM setting.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<div class=\"document\">\n <p>\n  Select the USB physical bus and port number that will be emulated by the ACRN Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"BasicMemoryInfo": {
			"type": "object",
			"required": [
				"whole"
			],
			"properties": {
				"whole": {
					"type": "integer",
					"default": 256,
					"title": "VM physical memory allocation (MB)",
					"description": "<div class=\"document\">\n <p>\n  Specify the physical memory allocated to this VM in Megabytes.\n </p>\n</div>\n"
				}
			}
		},
		"VMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/BasicMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Select the OS type for this VM. This is required to run Windows in a User VM. See\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">\n   Device Model Parameters\n  </a>\n  for how to include this in the Device Model arguments.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<div class=\"document\">\n <p>\n  Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor global emulation will take priority over this VM setting.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<div class=\"document\">\n <p>\n  Select the USB physical bus and port number that will be emulated by the ACRN Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/MMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				}
			}
		},
		"ServiceVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"console_vuart"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"os_config": {
					"$ref": "#/definitions/OSConfigurations",
					"title": "os_config",
					"description": "<div class=\"document\">\n <p>\n  General information for host kernel, boot\nargument and memory.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMBasicConfigType": {
			"type": "object",
			"required": [
				"vm_type",
				"name",
				"memory",
				"console_vuart",
				"os_type",
				"vbootloader",
				"vuart0",
				"virtio_devices"
			],
			"properties": {
				"vm_type": {
					"$ref": "#/definitions/BasicVMType",
					"title": "VM type",
					"description": "<div class=\"document\">\n <p>\n  Select the VM type. A standard VM (\n  <span class=\"docutils literal\">\n   STANDARD_VM\n  </span>\n  ) is for general-purpose applications, such as human-machine interface (HMI). A real-time VM (\n  <span class=\"docutils literal\">\n   RTVM\n  </span>\n  ) offers special features for time-sensitive applications.\n </p>\n</div>\n"
				},
				"name": {
					"type": "string",
					"minLength": 1,
					"maxLength": 15,
					"pattern": "^\\S+$",
					"title": "VM name",
					"description": "<div class=\"document\">\n <p>\n  Specify the name used to identify this VM. The VM name will be shown in the hypervisor console vm_list command.\n </p>\n</div>\n"
				},
				"cpu_affinity": {
					"$ref": "#/definitions/CPUAffinityConfiguration",
					"title": "Physical CPU affinity",
					"description": "<div class=\"document\">\n <p>\n  Select a subset of physical CPUs that this VM can use. More than one can be selected.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PostLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"console_vuart": {
					"$ref": "#/definitions/ConsoleVuartConfiguration",
					"default": "None",
					"title": "Console virtual UART type",
					"description": "<div class=\"document\">\n <p>\n  Select the console virtual UART (vUART) type. Add the console settings to the kernel command line by typing them in the \"Linux kernel command-line parameters\" text box (for example, console=ttyS0 for COM port 1).\n </p>\n</div>\n"
				},
				"mmio_resources": {
					"$ref": "#/definitions/PostLaunchedMMIOResourcesConfiguration",
					"title": "mmio_resources",
					"description": "<div class=\"document\">\n <p>\n  MMIO resources to passthrough.\n </p>\n</div>\n"
				},
				"pci_devs": {
					"$ref": "#/definitions/PCIDevsConfiguration",
					"title": "PCI device assignment",
					"description": ""
				},
				"os_type": {
					"$ref": "#/definitions/OSType",
					"default": "Non-Windows OS",
					"title": "OS type",
					"description": "<div class=\"document\">\n <p>\n  Select the OS type for this VM. This is required to run Windows in a User VM. See\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/user-guides/acrn-dm-parameters.html#acrn-dm-parameters\" target=\"_blank\">\n   Device Model Parameters\n  </a>\n  for how to include this in the Device Model arguments.\n </p>\n</div>\n"
				},
				"vbootloader": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "OVMF (Open Virtual Machine Firmware)",
					"description": "<div class=\"document\">\n <p>\n  Use virtual bootloader OVMF (Open Virtual Machine Firmware) to boot this VM.\n </p>\n</div>\n"
				},
				"vuart0": {
					"$ref": "#/definitions/EnablementType",
					"default": "Enable",
					"title": "Emulate COM1 as stdio I/O in Device Model",
					"description": "<div class=\"document\">\n <p>\n  Enable the ACRN Device Model to emulate COM1 as a User VM stdio I/O. Hypervisor global emulation will take priority over this VM setting.\n </p>\n</div>\n"
				},
				"usb_xhci": {
					"type": "string",
					"pattern": "^([\\d]+-[\\d]+){0,1}(:[\\d]+-[\\d]+)*$",
					"title": "Virtual USB host controller interface",
					"description": "<div class=\"document\">\n <p>\n  Select the USB physical bus and port number that will be emulated by the ACRN Device Model for this VM. USB 3.0, 2.0, and 1.0 are supported.\n </p>\n</div>\n"
				},
				"virtio_devices": {
					"type": "object",
					"properties": {
						"console": {
							"type": "string",
							"title": "console",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio console device setting.Input format:\n  </dt>\n  <dd>\n   <p>\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      [@]stdio|tty|pty|sock:portname[=portpath][,[@]stdio|tty|pty:portname[=portpath]]\n     </span>\n    </span>\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"network": {
							"type": "string",
							"title": "network",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio network device setting.\n  </dt>\n  <dd>\n   <p>\n    Input format:\n    <span class=\"docutils literal\">\n     <span class=\"pre\">\n      device_name[,vhost][,mac=XX:XX:XX:XX:XX:XX]\n     </span>\n    </span>\n    .\nThe\n    <span class=\"docutils literal\">\n     device_name\n    </span>\n    is the name of the TAP (or MacVTap) device.\nIt must include the keyword\n    <span class=\"docutils literal\">\n     tap\n    </span>\n    .\n    <span class=\"docutils literal\">\n     vhost\n    </span>\n    specifies the\nvhost backend; otherwise, the VBSU backend is used. The\n    <span class=\"docutils literal\">\n     mac\n    </span>\n    address is optional.\n   </p>\n  </dd>\n </dl>\n</div>\n"
						},
						"input": {
							"type": "string",
							"title": "input",
							"description": "<div class=\"document\">\n <p>\n  The virtio input device setting.\n </p>\n</div>\n"
						},
						"block": {
							"type": "string",
							"title": "block",
							"description": "<div class=\"document\">\n <dl class=\"simple\">\n  <dt>\n   The virtio block device setting.\n  </dt>\n  <dd>\n   <p>\n    Format: [blk partition:][img path] e.g.: /dev/sda3:./a/b.img\n   </p>\n  </dd>\n </dl>\n</div>\n"
						}
					},
					"title": "Virt-IO devices",
					"description": "<div class=\"document\">\n <p>\n  Enable virt-IO devices in post-launched VMs.\n </p>\n</div>\n"
				}
			}
		},
		"BasicFeatureOptionsType": {
			"type": "object",
			"required": [
				"IVSHMEM"
			],
			"properties": {
				"IVSHMEM": {
					"$ref": "#/definitions/IVSHMEMInfo",
					"title": "Inter-VM shared memory",
					"description": ""
				}
			}
		},
		"HVBasicConfigType": {
			"type": "object",
			"required": [
				"DEBUG_OPTIONS",
				"FEATURES",
				"vuart_connections"
			],
			"properties": {
				"DEBUG_OPTIONS": {
					"$ref": "#/definitions/DebugOptionsType",
					"title": "Debug options",
					"description": "<div class=\"document\">\n <p>\n  Configure the debug facilities.\n </p>\n</div>\n"
				},
				"FEATURES": {
					"$ref": "#/definitions/BasicFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"vuart_connections": {
					"$ref": "#/definitions/VuartConnectionsType",
					"title": "Virtual UART connection",
					"description": "<div class=\"document\">\n <p>\n  Specify the vUART connection settings.\nRefer to\n  <a class=\"reference external\" href=\"https://projectacrn.github.io/latest/tutorials/vuart_configuration.html#vuart-config\" target=\"_blank\">\n   Enable vUART Configurations\n  </a>\n  for detailed vUART settings.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedMemoryInfo": {
			"type": "object",
			"required": [
				"start_hpa"
			],
			"properties": {
				"start_hpa": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x100000000",
					"title": "start_hpa",
					"description": "<div class=\"document\">\n <p>\n  The starting physical address in host for the VM.\n </p>\n</div>\n"
				},
				"size": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x20000000",
					"title": "size",
					"description": "<div class=\"document\">\n <p>\n  The memory size in bytes for the VM. Default value is\n  <span class=\"docutils literal\">\n   0x200000000\n  </span>\n  .\n </p>\n</div>\n"
				},
				"start_hpa2": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x0",
					"title": "start_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Start of second HPA for non-contiguous allocations in host for the VM.\n </p>\n</div>\n"
				},
				"size_hpa2": {
					"$ref": "#/definitions/MemorySizeType",
					"default": "0x0",
					"title": "size_hpa2",
					"description": "<div class=\"document\">\n <p>\n  Memory size of second HPA for non-contiguous allocations in Bytes for the VM.\n </p>\n</div>\n"
				}
			}
		},
		"VMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section settings.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/AdvancedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"PreLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"epc_section": {
					"$ref": "#/definitions/EPCSection",
					"title": "epc_section",
					"description": "<div class=\"document\">\n <p>\n  Specify the Intel Software Guard Extensions (SGX) enclave page cache (EPC) section settings.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/PreLaunchedMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				},
				"pt_intx": {
					"type": "string",
					"title": "pt_intx",
					"description": "<div class=\"document\">\n <p>\n  Specify the pre-launched VM owned IOAPIC pins and the corresponding mapping between physical GSI and virtual GSI.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"ServiceVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos",
				"memory"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"memory": {
					"$ref": "#/definitions/ServiceMemoryInfo",
					"title": "memory",
					"description": "<div class=\"document\">\n <p>\n  Specify memory information for Service and User VMs.\n </p>\n</div>\n"
				}
			}
		},
		"PostLaunchedVMAdvancedConfigType": {
			"type": "object",
			"required": [
				"clos"
			],
			"properties": {
				"lapic_passthrough": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "LAPIC passthrough",
					"description": "<div class=\"document\">\n <p>\n  Enable LAPIC passthrough for this VM. This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"io_completion_polling": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "I/O completion polling",
					"description": "<div class=\"document\">\n <p>\n  Enable polling mode for I/O completion for this VM.  This feature is required for VMs with stringent real-time performance needs.\n </p>\n</div>\n"
				},
				"nested_virtualization_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Nested virtualization",
					"description": "<div class=\"document\">\n <p>\n  Enable nested virtualization for KVM.\n </p>\n</div>\n"
				},
				"virtual_cat_support": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Virtual Cache Allocation Technology (vCAT)",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of the Cache Allocation Technology (CAT) feature in RDT. CAT enables you to allocate cache to VMs, providing isolation to avoid performance interference from other VMs.\n </p>\n</div>\n"
				},
				"clos": {
					"$ref": "#/definitions/CLOSConfiguration",
					"title": "clos",
					"description": "<div class=\"document\">\n <p>\n  Class of Service for Cache Allocation Technology.\nRefer SDM 17.19.2 for details, and use with caution.\n </p>\n</div>\n"
				},
				"PTM": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Precision Time Measurement",
					"description": "<div class=\"document\">\n <p>\n  Enable virtualization of PCIe Precision Time Measurement (PTM) mechanism for devices with PTM capability and for real-time application. The hypervisor provides PCIe root port emulation instead of host bridge emulation for the VM. PTM coordinates timing between the device and root port with the device's local timebases without relying on software.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedFeatureOptionsType": {
			"type": "object",
			"required": [
				"RELOC",
				"SCHEDULER",
				"MULTIBOOT2",
				"ENFORCE_TURNOFF_AC",
				"ENFORCE_TURNOFF_GP",
				"RDT",
				"HYPERV_ENABLED",
				"ACPI_PARSE_ENABLED",
				"L1D_VMENTRY_ENABLED",
				"MCE_ON_PSC_DISABLED"
			],
			"properties": {
				"RELOC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hypervisor relocation in memory",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor relocation in memory. The bootloader may need to change the location of the hypervisor because of other firmware.\n </p>\n</div>\n"
				},
				"SCHEDULER": {
					"$ref": "#/definitions/SchedulerType",
					"default": "SCHED_BVT",
					"title": "Virtual CPU scheduler",
					"description": "<div class=\"document\">\n <p>\n  Select the scheduling algorithm used to determine which User VM runs on a shared virtual CPU.\n </p>\n</div>\n"
				},
				"MULTIBOOT2": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Multiboot2",
					"description": "<div class=\"document\">\n <p>\n  Enable multiboot2 protocol support and multiboot1 downward compatibility. Disable this feature if multiboot1 meets your requirements and to reduce lines of code.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_AC": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Split lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable detection of split locks, which can negatively affect an application's real-time performance. If a lock is detected, an alignment check exception #AC occurs.\n </p>\n</div>\n"
				},
				"ENFORCE_TURNOFF_GP": {
					"$ref": "#/definitions/Boolean",
					"default": "n",
					"title": "Uncacheable-memory lock detection",
					"description": "<div class=\"document\">\n <p>\n  Enable detection of uncacheable-memory locks, which can negatively affect an application's real-time performance. If a lock is detected, a general-protection exception #GP occurs.\n </p>\n</div>\n"
				},
				"RDT": {
					"$ref": "#/definitions/RDTType",
					"title": "Intel Resource Director Technology (RDT)",
					"description": "<div class=\"document\">\n <p>\n  Intel Resource Director Technology (RDT) provides cache and memory bandwidth allocation features. The features can be used to improve an application's real-time performance.\n </p>\n</div>\n"
				},
				"HYPERV_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Hyper-V virtualization technology",
					"description": "<div class=\"document\">\n <p>\n  Enable Microsoft Hyper-V Hypervisor Top-Level Functional Specification (TFLS) for Windows User VMs.\n </p>\n</div>\n"
				},
				"ACPI_PARSE_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Parse ACPI tables at runtime",
					"description": "<div class=\"document\">\n <p>\n  Enable ACPI runtime parsing to get DMAR (DMA remapping) configuration data from the APCI tables. Otherwise, use existing, static information from the associated board configuration file.\n </p>\n</div>\n"
				},
				"L1D_VMENTRY_ENABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Mitigate L1 terminal fault",
					"description": "<div class=\"document\">\n <p>\n  Enable L1 cache flush before VM entry to prevent L1 terminal fault. L1 terminal fault is a hardware vulnerability that allows unauthorized disclosure of information residing in the L1 data cache.\n </p>\n</div>\n"
				},
				"MCE_ON_PSC_DISABLED": {
					"$ref": "#/definitions/Boolean",
					"default": "y",
					"title": "Machine Check Error (MCE) workaround",
					"description": "<div class=\"document\">\n <p>\n  Enable the software workaround for Machine Check Error on Page Size Change (hardware bug in some processor families).\n </p>\n</div>\n"
				},
				"SSRAM": {
					"$ref": "#/definitions/SSRAMInfo",
					"title": "Software SRAM (for real-time apps)",
					"description": ""
				}
			}
		},
		"AdvancedMemoryOptionsType": {
			"type": "object",
			"required": [
				"STACK_SIZE"
			],
			"properties": {
				"STACK_SIZE": {
					"$ref": "#/definitions/HexFormat",
					"default": "0x2000",
					"title": "CPU memory stack size (bytes per CPU)",
					"description": "<div class=\"document\">\n <p>\n  Specify the size of the memory stack in bytes for each physical CPU. For example, if you specify 8 kilobytes, each CPU will get its own 8-kilobyte stack.\n </p>\n</div>\n"
				}
			}
		},
		"AdvancedCapacitiesOptionsType": {
			"type": "object",
			"required": [
				"MAX_PCI_DEV_NUM",
				"MAX_PT_IRQ_ENTRIES",
				"MAX_MSIX_TABLE_NUM",
				"MAX_EMULATED_MMIO"
			],
			"properties": {
				"MAX_PCI_DEV_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 1024,
					"default": 96,
					"title": "Maximum number of PCI devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of PCI devices. This impacts the amount of memory used to maintain information about these PCI devices. The default value is calculated from the board configuration file. If you have PCI devices that were not detected by the Board Inspector, you may need to change this maximum value.\n </p>\n</div>\n"
				},
				"MAX_PT_IRQ_ENTRIES": {
					"type": "integer",
					"default": 256,
					"title": "Maximum number of IRQ entries for passthrough devices",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of interrupt request (IRQ) entries from all passthrough devices.\n </p>\n</div>\n"
				},
				"MAX_MSIX_TABLE_NUM": {
					"type": "integer",
					"minimum": 1,
					"maximum": 2048,
					"default": 64,
					"title": "Maximum number of MSI-X tables per device",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of Message Signaled Interrupt MSI-X tables per device. The default value is calculated from the board configuration file.\n </p>\n</div>\n"
				},
				"MAX_EMULATED_MMIO": {
					"type": "integer",
					"minimum": 1,
					"maximum": 128,
					"default": 16,
					"title": "Maximum number of emulated MMIO regions",
					"description": "<div class=\"document\">\n <p>\n  Specify the maximum number of emulated MMIO regions for device virtualization. The default value is calculated from the board configuration file.\n </p>\n</div>\n"
				}
			}
		},
		"HVAdvancedConfigType": {
			"type": "object",
			"required": [
				"FEATURES",
				"MEMORY",
				"CAPACITIES"
			],
			"properties": {
				"FEATURES": {
					"$ref": "#/definitions/AdvancedFeatureOptionsType",
					"title": "Hypervisor features",
					"description": "<div class=\"document\">\n <p>\n  Enable hypervisor features.\n </p>\n</div>\n"
				},
				"MEMORY": {
					"$ref": "#/definitions/AdvancedMemoryOptionsType",
					"title": "Memory options",
					"description": "<div class=\"document\">\n <p>\n  Configure memory used by the hypervisor.\n </p>\n</div>\n"
				},
				"CAPACITIES": {
					"$ref": "#/definitions/AdvancedCapacitiesOptionsType",
					"title": "Hypervisor capacities",
					"description": "<div class=\"document\">\n <p>\n  Configure the capacities of the hypervisor.\n </p>\n</div>\n"
				}
			}
		}
	}
}