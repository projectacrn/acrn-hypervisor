<?xml version="1.0"?>
<xs:schema xml:id="root"
	   xmlns:xs="http://www.w3.org/2001/XMLSchema"
	   xmlns:acrn="https://projectacrn.org">

<xs:simpleType name="VMOptionsType">
  <xs:annotation>
    <xs:documentation>Current supported VM types are:

- ``SAFETY_VM`` pre-launched Safety VM
- ``PRE_STD_VM`` pre-launched Standard VM
- ``PRE_RT_VM`` pre-launched real-time capable VM
- ``SOS_VM`` pre-launched Service VM
- ``POST_STD_VM`` post-launched Standard VM
- ``POST_RT_VM`` post-launched real-time capable VM
- ``KATA_VM`` post-launched Kata Container VM</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="SOS_VM" />
    <xs:enumeration value="SAFETY_VM" />
    <xs:enumeration value="PRE_RT_VM" />
    <xs:enumeration value="PRE_STD_VM" />
    <xs:enumeration value="POST_STD_VM" />
    <xs:enumeration value="POST_RT_VM" />
    <xs:enumeration value="KATA_VM" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="GuestFlagsOptionsType">
  <xs:annotation>
    <xs:documentation>
- 0, 0UL and empty string means there is no guest flag is enabled.
- ``GUEST_FLAG_SECURE_WORLD_ENABLED`` specify whether the secure world is
  enabled
- ``GUEST_FLAG_LAPIC_PASSTHROUGH`` specify whether LAPIC is passed through
- ``GUEST_FLAG_IO_COMPLETION_POLLING`` specify whether the hypervisor needs
  IO polling to completion
- ``GUEST_FLAG_HIDE_MTRR`` specify whether to hide MTRR from the VM
- ``GUEST_FLAG_RT`` specify whether the VM is RT-VM (real-time)</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="" />
    <xs:enumeration value="0" />
    <xs:enumeration value="0UL" />
    <xs:enumeration value="GUEST_FLAG_SECURE_WORLD_ENABLED" />
    <xs:enumeration value="GUEST_FLAG_LAPIC_PASSTHROUGH" />
    <xs:enumeration value="GUEST_FLAG_IO_COMPLETION_POLLING" />
    <xs:enumeration value="GUEST_FLAG_HIDE_MTRR" />
    <xs:enumeration value="GUEST_FLAG_RT" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="GuestFlagsInfo">
  <xs:sequence>
    <xs:element name="guest_flag" type="GuestFlagsOptionsType" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>Select all applicable flags for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="CPUAffinityConfiguration">
  <xs:sequence>
    <xs:element name="pcpu_id" type="xs:integer" default="2" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>A pCPU that this VM's vCPU is allowed to pin to.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="CLOSConfiguration">
  <xs:sequence>
    <xs:element name="vcpu_clos" type="xs:integer" default="0" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>Configure each CPU in VMs to a desired CLOS ID in the ``VM`` section of the
scenario file. Follow :ref:`rdt_detection_capabilities`
to identify the maximum supported CLOS ID that can be used.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="EPCSection">
  <xs:annotation acrn:configurable="n">
    <xs:documentation>epc section.</xs:documentation>
  </xs:annotation>
  <xs:sequence>
    <xs:element name="base" type="HexFormat" default="0">
      <xs:annotation>
        <xs:documentation>SGX EPC section base, must be page aligned.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size" type="HexFormat" default="0">
      <xs:annotation>
        <xs:documentation>SGX EPC section size in Bytes, must be page aligned.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="MemoryInfo">
  <xs:sequence>
    <xs:element name="start_hpa" type="HexFormat" default="0x100000000">
      <xs:annotation>
        <xs:documentation>The start physical address in host for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size" type="MemorySizeType" default="0x20000000">
      <xs:annotation>
        <xs:documentation>The memory size in bytes for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="start_hpa2" type="HexFormat" default="0x0" minOccurs="0">
      <xs:annotation acrn:configurable="n">
        <xs:documentation>Start of second HPA for non-contiguous allocations in host for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size_hpa2" type="MemorySizeType" default="0x0" minOccurs="0">
      <xs:annotation acrn:configurable="n">
        <xs:documentation>Memory size of second HPA for non-contiguous allocations in Bytes for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="OSConfigurations">
  <xs:sequence>
    <xs:element name="name">
      <xs:simpleType>
        <xs:annotation>
          <xs:documentation>Specify the OS name of VM; currently, it is not referenced by the hypervisor code.String from 1 to 32
characters long.</xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
          <xs:minLength value="1" />
          <xs:maxLength value="32" />
        </xs:restriction>
      </xs:simpleType>
    </xs:element>
    <xs:element name="kern_type" type="VMKernelType">
      <xs:annotation>
        <xs:documentation>Specify the kernel image type so that the hypervisor can load it correctly.
Currently supports ``KERNEL_BZIMAGE`` and ``KERNEL_ZEPHYR``.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_mod" type="xs:string">
      <xs:annotation>
        <xs:documentation>The tag for the kernel image that acts as a multiboot module; it must
exactly match the module tag in the GRUB multiboot cmdline.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="ramdisk_mod" type="xs:string">
      <xs:annotation>
        <xs:documentation>The tag for the ramdisk image, which acts as a multiboot module; it
must exactly match the module tag in the GRUB multiboot cmdline.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="bootargs" type="xs:string">
      <xs:annotation acrn:configurable="../../vm_type[starts-with(text(), 'PRE')]">
        <xs:documentation>Configurable boot argument for pre-launched VM of hybrid or hybrid_rt mode.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_load_addr" type="HexFormat" minOccurs="0">
      <xs:annotation>
        <xs:documentation>The loading address in host memory for the VM kernel.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_entry_addr" type="HexFormat" minOccurs="0">
      <xs:annotation>
        <xs:documentation>The entry address in host memory for the VM kernel.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:simpleType name="VMKernelType">
  <xs:annotation>
    <xs:documentation>Specify the kernel image type so that the hypervisor can load it correctly.
Currently supports ``KERNEL_BZIMAGE`` and ``KERNEL_ZEPHYR``.</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="KERNEL_BZIMAGE" />
    <xs:enumeration value="KERNEL_ZEPHYR" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="LegacyVuartType">
  <xs:annotation acrn:configurable="n">
    <xs:documentation>vCOM type</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="VUART_LEGACY_PIO" />
    <xs:enumeration value="VUART_PCI" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="LegacyVuartBase">
  <xs:annotation>
    <xs:documentation>vUART (A.K.A COM) enabling switch. Enable by exposing its base address, disable by returning INVALID_COM_BASE.</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="SOS_COM1_BASE" />
    <xs:enumeration value="SOS_COM2_BASE" />
    <xs:enumeration value="COM1_BASE" />
    <xs:enumeration value="COM2_BASE" />
    <xs:enumeration value="COM3_BASE" />
    <xs:enumeration value="COM4_BASE" />
    <xs:enumeration value="INVALID_COM_BASE" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="LegacyVuartIrq">
  <xs:annotation acrn:configurable="n">
    <xs:documentation>vCOM irq</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="SOS_COM1_IRQ" />
    <xs:enumeration value="SOS_COM2_IRQ" />
    <xs:enumeration value="COM1_IRQ" />
    <xs:enumeration value="COM2_IRQ" />
    <xs:enumeration value="COM3_IRQ" />
    <xs:enumeration value="COM4_IRQ" />
    <xs:enumeration value="CONFIG_COM_IRQ" />
    <xs:enumeration value="3" />
    <xs:enumeration value="4" />
    <xs:enumeration value="6" />
    <xs:enumeration value="7" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="LegancyVuartConfiguration">
  <xs:sequence>
    <xs:element name="type" type="LegacyVuartType" default="VUART_LEGACY_PIO">
      <xs:annotation>
        <xs:documentation>vUART (aka COM) type; currently only supports the legacy PIO mode.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="base" type="LegacyVuartBase">
      <xs:annotation>
        <xs:documentation>vUART (A.K.A COM) enabling switch. Enable by exposing its COM_BASE
(SOS_COM_BASE for Service VM); disable by returning INVALID_COM_BASE.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="irq" type="LegacyVuartIrq">
      <xs:annotation>
        <xs:documentation>vCOM IRQ.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="target_vm_id" type="xs:integer" default="1" minOccurs="0">
      <xs:annotation>
        <xs:documentation>COM2 is used for VM communications. When it is enabled, specify which
target VM the current VM connects to.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="target_uart_id" type="xs:integer" default="1" minOccurs="0">
      <xs:annotation>
        <xs:documentation>Target vUART ID to which the vCOM2 connects.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
  <xs:attribute name="id" type="xs:integer" use="required"/>
</xs:complexType>

<xs:simpleType name="PCIVuartBase">
  <xs:annotation>
    <xs:documentation>PCI based vUART enabling switch. Enable by specifying PCI_VUART;
disable by returning INVALID_PCI_BASE.</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="PCI_VUART" />
    <xs:enumeration value="INVALID_PCI_BASE" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="ConsoleVuartConfiguration">
  <xs:sequence>
    <xs:element name="base" type="PCIVuartBase" default="INVALID_PCI_BASE">
      <xs:annotation>
        <xs:documentation>Console vUART (A.K.A PCI based vUART) enabling switch.
  Enable by specifying PCI_VUART; disable by returning INVALID_PCI_BASE.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
  <xs:attribute name="id" type="xs:integer" use="required" />
</xs:complexType>

<xs:complexType name="CommunicationVuartConfiguration">
  <xs:sequence>
    <xs:element name="base" type="PCIVuartBase" default="INVALID_PCI_BASE">
      <xs:annotation>
        <xs:documentation>Communication vUART (A.K.A PCI based vUART) enabling switch.
Enable by specifying PCI_VUART; disable by returning INVALID_PCI_BASE.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="target_vm_id" type="xs:integer">
      <xs:annotation>
        <xs:documentation>specify which target VM the current VM connects to.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="target_uart_id" type="xs:integer">
      <xs:annotation>
        <xs:documentation>Target vUART ID to which the ``communication_vuart`` connects.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
  <xs:attribute name="id" type="xs:integer" use="required" />
</xs:complexType>

<xs:complexType name="MMIOResourcesConfiguration">
  <xs:sequence>
    <xs:element name="TPM2" type="Boolean" default="n" minOccurs="0">
      <xs:annotation>
        <xs:documentation>TPM2 device to passthrough.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="p2sb" type="Boolean" default="n" minOccurs="0">
      <xs:annotation>
        <xs:documentation>Exposing the P2SB (Primary-to-Sideband) bridge to the pre-launched VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="PCIDevsConfiguration">
  <xs:sequence>
    <xs:element name="pci_dev" type="xs:string" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>A passthrough pci device.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="BoardPrivateConfiguration">
  <xs:sequence>
    <xs:element name="rootfs" type="xs:string" default="/dev/nvme0n1p3">
      <xs:annotation>
        <xs:documentation>rootfs for the Linux kernel.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="bootargs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specify kernel boot arguments for Service OS.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

</xs:schema>
