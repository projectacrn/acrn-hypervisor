<?xml version="1.0"?>
<xs:schema xml:id="root"
	   xmlns:xs="http://www.w3.org/2001/XMLSchema"
	   xmlns:acrn="https://projectacrn.org">

<xs:simpleType name="LoadOrderType">
  <xs:annotation>
    <xs:documentation>Current supported VM types are:

- ``PRE_LAUNCHED_VM`` pre-launched VM
- ``SERVICE_VM`` Service VM
- ``POST_LAUNCHED_VM`` post-launched VM</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="SERVICE_VM" />
    <xs:enumeration value="PRE_LAUNCHED_VM" />
    <xs:enumeration value="POST_LAUNCHED_VM" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="VMType">
  <xs:annotation>
    <xs:documentation>Current supported VM types are:

- ``RTVM`` Read-time VM
- ``STANDARD_VM`` Service VM
- ``TEE_VM`` VM with Trusted Execution Environment, which could provide high level
  security of code execution
- ``REE_VM`` VM with Rich Execution Environment, which is a companion VM with TEE_VM,
  and could provide more features and applications, but is vulnerable to attacks</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="RTVM" />
    <xs:enumeration value="STANDARD_VM" />
    <xs:enumeration value="TEE_VM" />
    <xs:enumeration value="REE_VM" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="CPUAffinityConfiguration">
  <xs:sequence>
    <xs:element name="pcpu_id" type="xs:integer" default="2" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>A pCPU that this VM's vCPU is allowed to pin
to.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="CLOSConfiguration">
  <xs:sequence>
    <xs:element name="vcpu_clos" type="xs:integer" default="0" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>By default (``virtual_cat_support`` is not specified):
vcpu_clos is per-CPU and it configures each CPU in VMs to a desired CLOS ID in the ``VM`` section of the
scenario file. Follow :ref:`rdt_detection_capabilities` to identify the maximum supported CLOS ID that can be used.

If ``virtual_cat_support`` is specified:
vcpu_clos is not per-CPU anymore, just a list of physical CLOSIDs (minimum 2) that are assigned to VMs
for vCAT use. Each vcpu_clos will be mapped to a virtual CLOSID, the first vcpu_clos is mapped to virtual
CLOSID 0 and the second is mapped to virtual CLOSID 1, etc.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="EPCSection">
  <xs:annotation acrn:configurable="n">
    <xs:documentation>epc section.</xs:documentation>
  </xs:annotation>
  <xs:sequence>
    <xs:element name="base" type="HexFormat" default="0">
      <xs:annotation>
        <xs:documentation>SGX EPC section base, must be page aligned.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size" type="HexFormat" default="0">
      <xs:annotation>
        <xs:documentation>SGX EPC section size in Bytes, must be page
aligned.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="MemoryInfo">
  <xs:sequence>
    <xs:element name="start_hpa" type="HexFormat" default="0x100000000">
      <xs:annotation>
        <xs:documentation>The starting physical address in host for the
VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size" type="MemorySizeType" default="0x20000000" minOccurs="0">
      <xs:annotation>
        <xs:documentation>The memory size in bytes for the VM. Default
value is ``0x200000000``.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="start_hpa2" type="HexFormat" default="0x0" minOccurs="0">
      <xs:annotation acrn:configurable="n">
        <xs:documentation>Start of second HPA for non-contiguous
allocations in host for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="size_hpa2" type="MemorySizeType" default="0x0" minOccurs="0">
      <xs:annotation acrn:configurable="n">
        <xs:documentation>Memory size of second HPA for non-contiguous
allocations in Bytes for the VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="OSConfigurations">
  <xs:all>
    <xs:element name="kern_type" type="VMKernelType">
      <xs:annotation>
        <xs:documentation>Specify the kernel image type so the hypervisor can load it correctly.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_mod" type="xs:string">
      <xs:annotation>
        <xs:documentation>The tag for the kernel image that acts as a multiboot module; it must
exactly match the module tag in the GRUB multiboot cmdline.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="ramdisk_mod" type="xs:string">
      <xs:annotation>
        <xs:documentation>The tag for the ramdisk image, which acts as a multiboot module; it
must exactly match the module tag in the GRUB multiboot cmdline.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="bootargs" type="xs:string">
      <xs:annotation>
        <xs:documentation>Configurable boot argument for pre-launched VM of hybrid or hybrid_rt mode.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_load_addr" type="KernLoadAddr" minOccurs="0">
      <xs:annotation>
        <xs:documentation>The loading address in host memory for the VM kernel.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="kern_entry_addr" type="KernEntryAddr" minOccurs="0">
      <xs:annotation>
        <xs:documentation>The entry address in host memory for the VM kernel.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:all>
</xs:complexType>

<xs:simpleType name="VMKernelType">
  <xs:annotation>
    <xs:documentation>A string with either ``KERNEL_BZIMAGE``, ``KERNEL_ELF`` or
``KERNEL_RAWIMAGE``.</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="KERNEL_BZIMAGE" />
    <xs:enumeration value="KERNEL_RAWIMAGE" />
    <xs:enumeration value="KERNEL_ELF" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="ConsoleVuartConfiguration">
  <xs:restriction base="xs:string">
    <xs:enumeration value="None" />
    <xs:enumeration value="COM Port 1" />
    <xs:enumeration value="COM Port 2" />
    <xs:enumeration value="COM Port 3" />
    <xs:enumeration value="COM Port 4" />
    <xs:enumeration value="PCI" />
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="VuartType">
  <xs:annotation>
    <xs:documentation>vCOM type</xs:documentation>
  </xs:annotation>
  <xs:restriction base="xs:string">
    <xs:enumeration value="legacy" />
    <xs:enumeration value="pci" />
  </xs:restriction>
</xs:simpleType>

<xs:complexType name="VuartEndpointType">
  <xs:sequence>
    <xs:element name="vm_name" type="xs:string"/>
    <xs:element name="io_port" type="HexFormat" default="0x3F" />
    <xs:element name="vbdf" type="VBDFType" minOccurs="0" maxOccurs="1"  />
  </xs:sequence>
</xs:complexType>

<xs:complexType name="VuartConnectionType">
  <xs:sequence>
    <xs:element name="name" type="xs:string" />
    <xs:element name="type" type="VuartType" default="legacy" />
    <xs:element name="endpoint" type="VuartEndpointType" minOccurs="2" maxOccurs="2" />
  </xs:sequence>
</xs:complexType>

<xs:complexType name="VuartConnectionsType">
  <xs:sequence>
    <xs:element name="vuart_connection" type="VuartConnectionType"  minOccurs="0" maxOccurs="unbounded"/>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="MMIOResourcesConfiguration">
  <xs:sequence>
    <xs:element name="TPM2" type="Boolean" default="n" minOccurs="0">
      <xs:annotation>
        <xs:documentation>Specify TPM2 device to passthrough.</xs:documentation>
      </xs:annotation>
    </xs:element>
    <xs:element name="p2sb" type="Boolean" default="n" minOccurs="0">
      <xs:annotation>
        <xs:documentation>Expose the P2SB (Primary-to-Sideband) bridge
to the pre-launched VM.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

<xs:complexType name="PCIDevsConfiguration">
  <xs:sequence>
    <xs:element name="pci_dev" type="xs:string" maxOccurs="unbounded">
      <xs:annotation>
        <xs:documentation>A passthrough PCI device.</xs:documentation>
      </xs:annotation>
    </xs:element>
  </xs:sequence>
</xs:complexType>

</xs:schema>
