# The VM type of a VM which lifecycle manager will run on
# -service_vm	the lifecycle manager will be run on the service VM
# -user_vm	the lifecycle manager will be run on the user VM
VM_TYPE=service_vm

# The VM name of a VM which lifecycle manager will run on, the name should
# be unique in the whole system, this name will be embedded log message to
# help user to do system debugging.
VM_NAME=service_VM

# The device type and device names of the devices which are used to
# communicate with other VMs in lifecycle manager.
# For user VM, the default value is tty:/dev/ttyS1;
#
# For service VM, the default setting rule of this field: /dev/ttyS8 is to
# communicate with VM1 (VM ID in hypervisor = 1), /dev/ttyS9 is for VM2 (VM ID is 2),
# /dev/ttyS10 is for VM3 (VM ID is 3) ... /dev/ttyS14 is for VM7 (VM ID is 7)
# note: need to double check related communication vuarts are valid in hypervisor scenario config
# file.
DEV_NAME=tty:/dev/ttyS8,/dev/ttyS9,/dev/ttyS10,/dev/ttyS11,/dev/ttyS12,/dev/ttyS13,/dev/ttyS14

# The device name of the device which is used to communicate with the VM,
# and this VM is allowed to trigger system shutdown through executing
# s5_trigger.sh.
# For user VM, this field is useless.
ALLOW_TRIGGER_S5=/dev/ttyS10

# The device name of the device which is used to communicate with the VM,
# and this VM is allowed to trigger system reboot through executing
# system_reboot_trigger_win.py.
# For user VM, this field is useless.
ALLOW_TRIGGER_SYSREBOOT=/dev/ttyS10
