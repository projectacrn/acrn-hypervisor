<acrn-config board="" scenario="">
  <vm id="0">
    <vm_type desc="Specify the VM by its load order: PRE_LAUNCHED_VM, SOS_VM or POST_LAUNCHED_VM." readonly="true">SAFETY_VM</vm_type>
    <name desc="Specify the VM name which will be shown in hypervisor console command: vm_list."></name>
    <guest_flags desc="Select all applicable flags for the VM" multiselect="true">
        <guest_flag></guest_flag>
    </guest_flags>
    <cpu_affinity desc="List of pCPU: the guest VM is allowed to create vCPU from all or a subset of this list.">
        <pcpu_id></pcpu_id>
    </cpu_affinity>
    <clos desc="Class of Service for Cache Allocation Technology. Please refer SDM 17.19.2 for details and use with caution.">
        <vcpu_clos>0</vcpu_clos>
    </clos>
    <epc_section configurable="0" desc="epc section">
        <base desc="SGX EPC section base, must be page aligned">0</base>
        <size desc="SGX EPC section size in Bytes, must be page aligned">0</size>
    </epc_section>
    <memory>
        <start_hpa desc="The start physical address in host for the VM"></start_hpa>
        <size desc="The memory size in Bytes for the VM"></size>
        <start_hpa2 configurable="0" desc="Start of second HPA for non-contiguous allocations in host for the VM">0x0</start_hpa2>
        <size_hpa2 configurable="0" desc="Memory size of second HPA for non-contiguous allocations in Bytes for the VM">0x0</size_hpa2>
    </memory>
    <os_config>
        <name desc="Specify the OS name of VM, currently it is not referenced by hypervisor code."></name>
        <kern_type desc="Specify the kernel image type so that hypervisor could load it correctly. Currently support KERNEL_BZIMAGE and KERNEL_ZEPHYR."></kern_type>
        <kern_mod desc="The tag for kernel image which act as multiboot module, it must exactly match the module tag in GRUB multiboot cmdline."></kern_mod>
        <ramdisk_mod desc="The tag for ramdisk image which act as multiboot module, it must exactly match the module tag in GRUB multiboot cmdline."></ramdisk_mod>
        <bootargs desc="Specify kernel boot arguments"></bootargs>
        <kern_load_addr desc="The loading address in host memory for the VM kernel"></kern_load_addr>
        <kern_entry_addr desc="The entry address in host memory for the VM kernel"></kern_entry_addr>
    </os_config>
    <legacy_vuart id="0">
        <type configurable="0" desc="vCOM1 type">VUART_LEGACY_PIO</type>
        <base desc="vUART0 (A.K.A COM1) enabling switch. Enable by exposing its base address, disable by returning invalid base address.">COM1_BASE</base>
        <irq configurable="0" desc="vCOM1 irq">COM1_IRQ</irq>
    </legacy_vuart>
    <legacy_vuart id="1">
        <type configurable="0" desc="vCOM2 type">VUART_LEGACY_PIO</type>
        <base desc="vUART1 (A.K.A COM2) enabling switch. Enable by exposing its base address, disable by returning invalid base address.">INVALID_COM_BASE</base>
        <irq configurable="0" desc="vCOM2 irq">COM2_IRQ</irq>
        <target_vm_id desc="COM2 is used for VM communications. When it is enabled, please specify which target VM that current VM connect to.">0</target_vm_id>
        <target_uart_id configurable="0" desc="target vUART ID that vCOM2 connect to">1</target_uart_id>
    </legacy_vuart>
    <console_vuart id="0">
        <base desc="Console vuart (PCI based) enabling switch. Enable by exposing its base address, disable by returning invalid base address.">INVALID_PCI_BASE</base>
    </console_vuart>
    <communication_vuart id="1">
        <base desc="Communicatin vuart (PCI based) enabling switch. Enable by exposing its base address, disable by returning invalid base address.">INVALID_PCI_BASE</base>
        <target_vm_id desc="This vuart is used for VM communications. When it is enabled, please specify which target VM that current VM connect to.">1</target_vm_id>
        <target_uart_id desc="target vUART ID that this vuart connects to">1</target_uart_id>
    </communication_vuart>
    <pci_devs configurable="0" desc="pci devices list">
        <pci_dev desc="pci device"></pci_dev>
    </pci_devs>
    <mmio_resources desc="mmio devices list to passthrough">
        <TPM2 desc="TPM2 device">n</TPM2>
    </mmio_resources>
  </vm>
</acrn-config>
